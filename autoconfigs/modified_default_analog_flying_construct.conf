# This is a modified default flight autoconfig for Analog Input, made by Davemane42

name: Modified_Default_Analog_Input_Flying

slots:
    core:
        class: CoreUnit
    antigrav:
        class: AntiGravityGeneratorUnit
    warpdrive:
        class: WarpDriveUnit
    atmofueltank:
        class: AtmoFuelContainer
        select: all
    spacefueltank:
        class: SpaceFuelContainer
        select: all
    rocketfueltank:
        class: RocketFuelContainer
        select: all
    gyro:
        class: GyroUnit
    shield:
        class: ShieldGeneratorUnit
    weapon:
        class: WeaponUnit
        select: manual
    radar:
        class: RadarPVPUnit
        select: manual

handlers:
    unit:
        start:
            lua: |
            
                ------- Analog Input -------
                system.print("Press 'B' to toggle analog inputs")
                
                invertPitch = true --export: Invert pitch up/down
                invertYaw = false --export: Invert yaw left/right
                invertRoll = false --export: Invert roll left/right
                lastMouseTime = system.getArkTime()
                analog_input = 0
                mousedeltax = 0
                mousedeltay = 0
                --It is hard to recommend any mappings from these Axis to the game input.
                --Generally it is expected that it is modifiable in a properly distributed script.
                --Ideally, people decide on a mapping standard for controls, so every analog input ship works as expected with the tool mappings that people decided.
                ZAxis1 = 0	--Gamepad Default: TriggerR
                ZAxis2 = 0	--Gamepad Default: TriggerL
                XAxis1 = 0	--Gamepad Default: JoyX
                YAxis1 = 0	--Gamepad Default: JoyY
                XAxis2 = 0	--Gamepad Default: CamX
                YAxis2 = 0	--Gamepad Default: CamY

                function toBits(num)
                    -- returns a table of bits, most significant first.
                    bits = math.max(1, select(2, math.frexp(num)))
                    local t = {} -- will contain the bits
                    for b = bits, 1, -1 do
                        t[b] = math.fmod(num, 2)
                        num = math.floor((num - t[b]) / 2)
                    end
                    return t
                end

                math.frexp = function(x)
                    if x == 0 then return 0, 0 end
                    local e = math.floor(math.log(math.abs(x)) / math.log(2) + 1)
                    return x / 2 ^ e, e
                end

                --str = string range for input. multiplier = the highest value bit. returns the resulting integer
                function toInt(str)
                    local multiplier = 2^(str:len()-1)
                    local number = 0
                    for i = 1,#str do
                        number = number +(multiplier*tonumber(str:sub(i,i)))
                        multiplier = multiplier/2
                    end
                    return number
                end

                function getCleanBitstring(val)
                   local bitstring = ""
                    for k, v in pairs(toBits(val)) do
                        bitstring = bitstring..v
                    end
                    return bitstring
                end

                --The game is provided with data for 2 full Axis and one Lesser Axis
                --_Axis1 can be XAxis1 or YAxis1. Standing for the Left Stick.
                --_Axis2 can be XAxis2 or YAxis2. Standing for the Right Stick.
                --LesserAxis can stand for LesserAxis1 or LesserAxis2. Both for Trigger
                --What it ends up being depends on the bitstring that was handed to the function and what was mapped in the analog input tool.
                function gamepadGet5Axis(bitstring)
                    local trigger_steps = 63
                    local stick_steps = 128

                    LesserAxis = toInt(string.sub(bitstring, 18, 23))
                    --system.print(string.sub(bitstring, 18, 23))
                    LesserAxis = LesserAxis/trigger_steps

                    _Axis1 = toInt(string.sub(bitstring, 10, 17))
                    --system.print(string.sub(bitstring, 10, 17))
                    if _Axis1>=stick_steps then
                        _Axis1=_Axis1 - stick_steps
                    else
                        _Axis1=-_Axis1
                    end
                    _Axis1 = _Axis1/(stick_steps-1)

                    _Axis2 = toInt(string.sub(bitstring, 2, 9))
                    --system.print(string.sub(bitstring, 2, 9))
                    if _Axis2>=stick_steps then
                        _Axis2=_Axis2 - stick_steps
                    else
                        _Axis2=-_Axis2
                    end
                    _Axis2 = _Axis2/(stick_steps-1)
                    return LesserAxis, _Axis1, _Axis2
                end

                --The game is provided with data for 2 full Axis and one Lesser Axis
                --_Axis1 can be XAxis1 or YAxis1. Standing for one 2-Axis input such as a Left Stick.
                --_Axis2 can be XAxis2 or YAxis2. Standing for another 2-Axis input such as a Right Stick.
                --ZAxis_ can stand for ZAxis1 or ZAxis2. A third 2-Axis input, for example joystick yaw axis or gamepad Triggers.
                --What it ends up being depends on the bitstring that was handed to the function and what was mapped in the analog input tool.
                function gamepadGet6Axis(bitstring)
                    local trigger_steps = 64
                    local stick_steps = 64

                    local ZAxis_ = toInt(string.sub(bitstring, 16, 22))
                    --system.print(string.sub(bitstring, 16, 22))

                    if ZAxis_>=trigger_steps then
                        ZAxis_=ZAxis_ - trigger_steps
                    else
                        --this should realistically never ever happen for an Xbox gamepad!
                        ZAxis_=-ZAxis_
                    end
                    local ZAxis_ = ZAxis_/(trigger_steps-1)


                    _Axis1 = toInt(string.sub(bitstring, 9, 15))
                    --system.print(string.sub(bitstring,9, 15))
                    if _Axis1>=stick_steps then
                        _Axis1=_Axis1 - stick_steps
                    else
                        _Axis1=-_Axis1
                    end
                    _Axis1 = _Axis1/(stick_steps-1)

                    _Axis2 = toInt(string.sub(bitstring, 2, 8))
                    --system.print(string.sub(bitstring, 2, 8))
                    if _Axis2>=stick_steps then
                        _Axis2=_Axis2 - stick_steps
                    else
                        _Axis2=-_Axis2
                    end
                    _Axis2 = _Axis2/(stick_steps-1)
                    return ZAxis_, _Axis1, _Axis2
                end

                counter = 0
                multiplecounter = 0
                ----------------------------
                
                pitchInput = 0
                rollInput = 0
                yawInput = 0
                brakeInput = 0

                Nav = Navigator.new(system, core, unit)
                local groundAltitude = 4 --export: Groundaltitude in m
                Nav.axisCommandManager:setupCustomTargetSpeedRanges(axisCommandId.longitudinal, {1000, 5000, 10000, 20000, 30000})
                Nav.axisCommandManager:setTargetGroundAltitude(groundAltitude)

                -- Parenting widget
                parentingPanelId = system.createWidgetPanel("Docking")
                parentingWidgetId = system.createWidget(parentingPanelId,"parenting")
                system.addDataToWidget(unit.getDataId(),parentingWidgetId)

                -- Combat stress widget
                coreCombatStressPanelId = system.createWidgetPanel("Core combat stress")
                coreCombatStressgWidgetId = system.createWidget(coreCombatStressPanelId,"core_stress")
                system.addDataToWidget(core.getDataId(),coreCombatStressgWidgetId)

                -- element widgets
                -- For now we have to alternate between PVP and non-PVP widgets to have them on the same side.
                _autoconf.displayCategoryPanel(weapon, weapon_size, L_TEXT("ui_lua_widget_weapon", "Weapons"), "weapon", true)
                core.show()
                _autoconf.displayCategoryPanel(radar, radar_size, L_TEXT("ui_lua_widget_periscope", "Periscope"), "periscope")
                placeRadar = true
                if atmofueltank_size > 0 then
                    _autoconf.displayCategoryPanel(atmofueltank, atmofueltank_size, L_TEXT("ui_lua_widget_atmofuel", "Atmo Fuel"), "fuel_container")
                    if placeRadar then
                        _autoconf.displayCategoryPanel(radar, radar_size, L_TEXT("ui_lua_widget_radar", "Radar"), "radar")
                        placeRadar = false
                    end
                end
                if spacefueltank_size > 0 then
                    _autoconf.displayCategoryPanel(spacefueltank, spacefueltank_size, L_TEXT("ui_lua_widget_spacefuel", "Space Fuel"), "fuel_container")
                    if placeRadar then
                        _autoconf.displayCategoryPanel(radar, radar_size, L_TEXT("ui_lua_widget_radar", "Radar"), "radar")
                        placeRadar = false
                    end
                end
                _autoconf.displayCategoryPanel(rocketfueltank, rocketfueltank_size, L_TEXT("ui_lua_widget_rocketfuel", "Rocket Fuel"), "fuel_container")
                if placeRadar then -- We either have only rockets or no fuel tanks at all, uncommon for usual vessels
                    _autoconf.displayCategoryPanel(radar, radar_size, L_TEXT("ui_lua_widget_radar", "Radar"), "radar")
                    placeRadar = false
                end
                if antigrav ~= nil then antigrav.show() end
                if warpdrive ~= nil then warpdrive.show() end
                if gyro ~= nil then gyro.show() end
                if shield ~= nil then shield.show() end

                -- freeze the player in he is remote controlling the construct
                if Nav.control.isRemoteControlled() == 1 then
                    system.freeze(1)
                end

                -- landing gear
                -- make sure every gears are synchonized with the first
                gearExtended = (Nav.control.isAnyLandingGearExtended() == 1) -- make sure it's a lua boolean
                if gearExtended then
                    Nav.control.extendLandingGears()
                else
                    Nav.control.retractLandingGears()
                end

        stop:
            lua: |
                _autoconf.hideCategoryPanels()
                if antigrav ~= nil then antigrav.hide() end
                if warpdrive ~= nil then warpdrive.hide() end
                if gyro ~= nil then gyro.hide() end
                core.hide()
                Nav.control.switchOffHeadlights()

    system:
        flush:
            lua: |
                -- constants: use 'myvar = defaultValue --export: description' to expose the variable in context menu

                local pitchSpeedFactor = 0.8 --export: This factor will increase/decrease the player input along the pitch axis<br>(higher value may be unstable)<br>Valid values: Superior or equal to 0.01
                local yawSpeedFactor =  1 --export: This factor will increase/decrease the player input along the yaw axis<br>(higher value may be unstable)<br>Valid values: Superior or equal to 0.01
                local rollSpeedFactor = 1.5 --export: This factor will increase/decrease the player input along the roll axis<br>(higher value may be unstable)<br>Valid values: Superior or equal to 0.01

                local brakeSpeedFactor = 3 --export: When braking, this factor will increase the brake force by brakeSpeedFactor * velocity<br>Valid values: Superior or equal to 0.01
                local brakeFlatFactor = 1 --export: When braking, this factor will increase the brake force by a flat brakeFlatFactor * velocity direction><br>(higher value may be unstable)<br>Valid values: Superior or equal to 0.01

                local autoRoll = false --export: [Only in atmosphere]<br>When the pilot stops rolling,  flight model will try to get back to horizontal (no roll)
                local autoRollFactor = 2 --export: [Only in atmosphere]<br>When autoRoll is engaged, this factor will increase to strength of the roll back to 0<br>Valid values: Superior or equal to 0.01

                local turnAssist = false --export: [Only in atmosphere]<br>When the pilot is rolling, the flight model will try to add yaw and pitch to make the construct turn better<br>The flight model will start by adding more yaw the more horizontal the construct is and more pitch the more vertical it is
                local turnAssistFactor = 2 --export: [Only in atmosphere]<br>This factor will increase/decrease the turnAssist effect<br>(higher value may be unstable)<br>Valid values: Superior or equal to 0.01

                local torqueFactor = 2 --export: Force factor applied to reach rotationSpeed<br>(higher value may be unstable)<br>Valid values: Superior or equal to 0.01

                -- validate params
                pitchSpeedFactor = math.max(pitchSpeedFactor, 0.01)
                yawSpeedFactor = math.max(yawSpeedFactor, 0.01)
                rollSpeedFactor = math.max(rollSpeedFactor, 0.01)
                torqueFactor = math.max(torqueFactor, 0.01)
                brakeSpeedFactor = math.max(brakeSpeedFactor, 0.01)
                brakeFlatFactor = math.max(brakeFlatFactor, 0.01)
                autoRollFactor = math.max(autoRollFactor, 0.01)
                turnAssistFactor = math.max(turnAssistFactor, 0.01)

                -- final default inputs
                --local finalPitchInput = pitchInput + system.getControlDeviceForwardInput()
                --local finalRollInput = rollInput + system.getControlDeviceYawInput()
                --local finalYawInput = yawInput - system.getControlDeviceLeftRightInput()
                --local finalBrakeInput = brakeInput

                -- Axis
                local worldVertical = vec3(core.getWorldVertical()) -- along gravity
                local constructUp = vec3(core.getConstructWorldOrientationUp())
                local constructForward = vec3(core.getConstructWorldOrientationForward())
                local constructRight = vec3(core.getConstructWorldOrientationRight())
                local constructVelocity = vec3(core.getWorldVelocity())
                local constructVelocityDir = vec3(core.getWorldVelocity()):normalize()
                local currentRollDeg = getRoll(worldVertical, constructForward, constructRight)
                local currentRollDegAbs = math.abs(currentRollDeg)
                local currentRollDegSign = utils.sign(currentRollDeg)

                ------- Analog Input -------
                if (system.getArkTime()-lastMouseTime) > 0.004 then
                    oldmousedeltax = mousedeltax
                    oldmousedeltay = mousedeltay
                    mousedeltax = system.getMouseDeltaX()
                    mousedeltay = system.getMouseDeltaY()
                    lastMouseTime = system.getArkTime()
                end

                --Change these to your hearts desire, but communicate why in the discord channel. Ideally we find one way that works for everyone.
                if analog_input ==1 then
                    finalPitchInput = -YAxis1	--Gamepad Default: Left Stick Y
                    finalRollInput = XAxis2	--Gamepad Default: Right Stick X
                    finalYawInput = -XAxis1	--Gamepad Default: Left Stick X
                else
                    finalPitchInput = pitchInput
                    finalRollInput = rollInput
                    finalYawInput = yawInput
                end

                --brakeInput
                if analog_input == 1 then
                    brakeAcceleration = -ZAxis2 * (brakeSpeedFactor * constructVelocity + brakeFlatFactor * constructVelocityDir)
                else
                    brakeAcceleration = -brakeInput * (brakeSpeedFactor * constructVelocity + brakeFlatFactor * constructVelocityDir)
                end
                Nav:setEngineForceCommand('brake', brakeAcceleration)
                ----------------------------

                -- Rotation
                local constructAngularVelocity = vec3(core.getWorldAngularVelocity())
                local targetAngularVelocity = finalPitchInput * pitchSpeedFactor * constructRight
                                                + finalRollInput * rollSpeedFactor * constructForward
                                                + finalYawInput * yawSpeedFactor * constructUp

                -- In atmosphere?
                if worldVertical:len() > 0.01 and unit.getAtmosphereDensity() > 0.0 then
                    local autoRollRollThreshold = 1.0
                    -- autoRoll on AND currentRollDeg is big enough AND player is not rolling
                    if autoRoll == true and currentRollDegAbs > autoRollRollThreshold and finalRollInput == 0 then
                        local targetRollDeg = utils.clamp(0,currentRollDegAbs-30, currentRollDegAbs+30);  -- we go back to 0 within a certain limit
                        if (rollPID == nil) then
                            rollPID = pid.new(autoRollFactor * 0.01, 0, autoRollFactor * 0.1) -- magic number tweaked to have a default factor in the 1-10 range
                        end
                        rollPID:inject(targetRollDeg - currentRollDeg)
                        local autoRollInput = rollPID:get()

                        targetAngularVelocity = targetAngularVelocity + autoRollInput * constructForward
                    end
                    local turnAssistRollThreshold = 20.0
                    -- turnAssist AND currentRollDeg is big enough AND player is not pitching or yawing
                    if turnAssist == true and currentRollDegAbs > turnAssistRollThreshold and finalPitchInput == 0 and finalYawInput == 0 then
                        local rollToPitchFactor = turnAssistFactor * 0.1 -- magic number tweaked to have a default factor in the 1-10 range
                        local rollToYawFactor = turnAssistFactor * 0.025 -- magic number tweaked to have a default factor in the 1-10 range

                        -- rescale (turnAssistRollThreshold -> 180) to (0 -> 180)
                        local rescaleRollDegAbs = ((currentRollDegAbs - turnAssistRollThreshold) / (180 - turnAssistRollThreshold)) * 180
                        local rollVerticalRatio = 0
                        if rescaleRollDegAbs < 90 then
                            rollVerticalRatio = rescaleRollDegAbs / 90
                        elseif rescaleRollDegAbs < 180 then
                            rollVerticalRatio = (180 - rescaleRollDegAbs) / 90
                        end

                        rollVerticalRatio = rollVerticalRatio * rollVerticalRatio

                        local turnAssistYawInput = - currentRollDegSign * rollToYawFactor * (1.0 - rollVerticalRatio)
                        local turnAssistPitchInput = rollToPitchFactor * rollVerticalRatio

                        targetAngularVelocity = targetAngularVelocity
                                            + turnAssistPitchInput * constructRight
                                            + turnAssistYawInput * constructUp
                    end
                end

                -- Engine commands
                local keepCollinearity = 1 -- for easier reading
                local dontKeepCollinearity = 0 -- for easier reading
                local tolerancePercentToSkipOtherPriorities = 1 -- if we are within this tolerance (in%), we don't go to the next priorities

                -- Rotation
                local angularAcceleration = torqueFactor * (targetAngularVelocity - constructAngularVelocity)
                local airAcceleration = vec3(core.getWorldAirFrictionAngularAcceleration())
                angularAcceleration = angularAcceleration - airAcceleration -- Try to compensate air friction
                Nav:setEngineTorqueCommand('torque', angularAcceleration, keepCollinearity, 'airfoil', '', '', tolerancePercentToSkipOtherPriorities)

                -- Brakes
                --local brakeAcceleration = -finalBrakeInput * (brakeSpeedFactor * constructVelocity + brakeFlatFactor * constructVelocityDir)
                --Nav:setEngineForceCommand('brake', brakeAcceleration)

                -- AutoNavigation regroups all the axis command by 'TargetSpeed'
                local autoNavigationEngineTags = ''
                local autoNavigationAcceleration = vec3()
                local autoNavigationUseBrake = false

                -- Longitudinal Translation
                local longitudinalEngineTags = 'thrust analog longitudinal'
                local longitudinalCommandType = Nav.axisCommandManager:getAxisCommandType(axisCommandId.longitudinal)
                if (longitudinalCommandType == axisCommandType.byThrottle) then
                    local longitudinalAcceleration = Nav.axisCommandManager:composeAxisAccelerationFromThrottle(longitudinalEngineTags,axisCommandId.longitudinal)
                    Nav:setEngineForceCommand(longitudinalEngineTags, longitudinalAcceleration, keepCollinearity)
                elseif  (longitudinalCommandType == axisCommandType.byTargetSpeed) then
                    local longitudinalAcceleration = Nav.axisCommandManager:composeAxisAccelerationFromTargetSpeed(axisCommandId.longitudinal)
                    autoNavigationEngineTags = autoNavigationEngineTags .. ' , ' .. longitudinalEngineTags
                    autoNavigationAcceleration = autoNavigationAcceleration + longitudinalAcceleration
                    if (Nav.axisCommandManager:getTargetSpeed(axisCommandId.longitudinal) == 0 or -- we want to stop
                        Nav.axisCommandManager:getCurrentToTargetDeltaSpeed(axisCommandId.longitudinal) < - Nav.axisCommandManager:getTargetSpeedCurrentStep(axisCommandId.longitudinal) * 0.5) -- if the longitudinal velocity would need some braking
                    then
                        autoNavigationUseBrake = true
                    end

                end

                -- Lateral Translation
                local lateralStrafeEngineTags = 'thrust analog lateral'
                local lateralCommandType = Nav.axisCommandManager:getAxisCommandType(axisCommandId.lateral)
                if (lateralCommandType == axisCommandType.byThrottle) then
                    local lateralStrafeAcceleration =  Nav.axisCommandManager:composeAxisAccelerationFromThrottle(lateralStrafeEngineTags,axisCommandId.lateral)
                    Nav:setEngineForceCommand(lateralStrafeEngineTags, lateralStrafeAcceleration, keepCollinearity)
                elseif  (lateralCommandType == axisCommandType.byTargetSpeed) then
                    local lateralAcceleration = Nav.axisCommandManager:composeAxisAccelerationFromTargetSpeed(axisCommandId.lateral)
                    autoNavigationEngineTags = autoNavigationEngineTags .. ' , ' .. lateralStrafeEngineTags
                    autoNavigationAcceleration = autoNavigationAcceleration + lateralAcceleration
                end

                -- Vertical Translation
                local verticalStrafeEngineTags = 'thrust analog vertical'
                local verticalCommandType = Nav.axisCommandManager:getAxisCommandType(axisCommandId.vertical)
                if (verticalCommandType == axisCommandType.byThrottle) then
                    local verticalStrafeAcceleration = Nav.axisCommandManager:composeAxisAccelerationFromThrottle(verticalStrafeEngineTags,axisCommandId.vertical)
                    Nav:setEngineForceCommand(verticalStrafeEngineTags, verticalStrafeAcceleration, keepCollinearity, 'airfoil', 'ground', '', tolerancePercentToSkipOtherPriorities)
                elseif  (verticalCommandType == axisCommandType.byTargetSpeed) then
                    local verticalAcceleration = Nav.axisCommandManager:composeAxisAccelerationFromTargetSpeed(axisCommandId.vertical)
                    autoNavigationEngineTags = autoNavigationEngineTags .. ' , ' .. verticalStrafeEngineTags
                    autoNavigationAcceleration = autoNavigationAcceleration + verticalAcceleration
                end

                -- Auto Navigation (Cruise Control)
                if (autoNavigationAcceleration:len() > constants.epsilon) then
                    if (brakeInput ~= 0 or autoNavigationUseBrake or math.abs(constructVelocityDir:dot(constructForward)) < 0.95)  -- if the velocity is not properly aligned with the forward
                    then
                        autoNavigationEngineTags = autoNavigationEngineTags .. ', brake'
                    end
                    Nav:setEngineForceCommand(autoNavigationEngineTags, autoNavigationAcceleration, dontKeepCollinearity, '', '', '', tolerancePercentToSkipOtherPriorities)
                end

                -- Rockets
                --Disabled for this script, as it overlaps with analog inputs.
                --Nav:setBoosterCommand('rocket_engine')

        update:
            lua: |
                --6axis is active!
                if analog_input ==1 then
                    -- sort out doubled and tripled inputs
                    --local canary = 4194304    --5axis
                    local canary = 2097152      --6axis
                    if mousedeltax<=(canary*2) and mousedeltax>=canary then
                        oldmousedeltax = mousedeltax
                        counter = counter+1
                    elseif mousedeltax == 0 then
                        mousedeltax = oldmousedeltax
                        multiplecounter = multiplecounter+1
                    else
                        mousedeltax = oldmousedeltax
                        multiplecounter = multiplecounter+1
                    end
                    if mousedeltay<=(canary*2) and mousedeltay>=canary then
                        oldmousedeltay = mousedeltay
                        counter = counter+1
                    elseif mousedeltay == 0 then
                        mousedeltay = oldmousedeltay
                        multiplecounter = multiplecounter+1
                    else
                        mousedeltay = oldmousedeltay
                        multiplecounter = multiplecounter+1
                    end

                    if multiplecounter == 1000 or counter == 1000 then
                        counter = 0
                        multiplecounter = 0
                    end
                    
                    --system.print("CounterRatio Counter/ Multiplecounter: "..((counter/multiplecounter)))

                    mousedeltax_bitstring = getCleanBitstring(mousedeltax)
                    --system.print(mousedeltax_bitstring)
                    if mousedeltax_bitstring ~= nil and mousedeltax_bitstring ~= "0.0" then
                        --To swap to 5-Axis, do this here
                        ZAxis1, XAxis1, XAxis2 = gamepadGet6Axis(mousedeltax_bitstring)
                    end
                    mousedeltay_bitstring = getCleanBitstring(mousedeltay)
                    --system.print(mousedeltay_bitstring)
                    if mousedeltay_bitstring ~= nil and mousedeltay_bitstring ~= "0.0" then
                        --To swap to 5-Axis, do this here
                        ZAxis2, YAxis1, YAxis2 = gamepadGet6Axis(mousedeltay_bitstring)
                    end
                    if invertPitch then YAxis1 = -YAxis1 end
                    if invertYaw then XAxis1 = -XAxis1 end
                    if invertRoll then XAxis2 = -XAxis2 end
                    
                    --For default configuration with an Xbox Gamepad:
                    --system.print("Left Trigger  "..ZAxis2)
                    --system.print("Left Stick X "..XAxis1)
                    --system.print("Left Stick Y "..YAxis1)
                    --system.print("Right Trigger  "..ZAxis1)
                    --system.print("Right Stick X "..XAxis2)
                    --system.print("Right Stick Y "..YAxis2)
                    Nav.axisCommandManager:setThrottleCommand(axisCommandId.longitudinal, ZAxis1)
                end
                
                Nav:update()

        actionStart:
            args: [gear]
            lua: |
                gearExtended = not gearExtended
                if gearExtended then
                    Nav.control.extendLandingGears()
                else
                    Nav.control.retractLandingGears()
                end

        actionStart:
            args: [light]
            lua: |
                if Nav.control.isAnyHeadlightSwitchedOn() == 1 then
                    Nav.control.switchOffHeadlights()
                else
                    Nav.control.switchOnHeadlights()
                end

        actionStart:
            args: [forward]
            lua: pitchInput = - 1
        actionStop:
            args: [forward]
            lua: pitchInput = 0
        actionStart:
            args: [backward]
            lua: pitchInput = 1
        actionStop:
            args: [backward]
            lua: pitchInput = 0
        actionStart:
            args: [left]
            lua: rollInput = - 1
        actionStop:
            args: [left]
            lua: rollInput = 0
        actionStart:
            args: [right]
            lua: rollInput = 1
        actionStop:
            args: [right]
            lua: rollInput = 0

        actionStart:
            args: [straferight]
            lua: Nav.axisCommandManager:updateCommandFromActionStart(axisCommandId.lateral, 1.0)
        actionStop:
            args: [straferight]
            lua: Nav.axisCommandManager:updateCommandFromActionStop(axisCommandId.lateral, -1.0)

        actionStart:
            args: [strafeleft]
            lua: Nav.axisCommandManager:updateCommandFromActionStart(axisCommandId.lateral, -1.0)
        actionStop:
            args: [strafeleft]
            lua: Nav.axisCommandManager:updateCommandFromActionStop(axisCommandId.lateral, 1.0)

        actionStart:
            args: [up]
            lua: |
                Nav.axisCommandManager:deactivateGroundEngineAltitudeStabilization()
                Nav.axisCommandManager:updateCommandFromActionStart(axisCommandId.vertical, 1.0)
        actionStop:
            args: [up]
            lua: |
                Nav.axisCommandManager:updateCommandFromActionStop(axisCommandId.vertical, -1.0)
                Nav.axisCommandManager:activateGroundEngineAltitudeStabilization(currentGroundAltitudeStabilization)
        actionStart:
            args: [down]
            lua: |
                Nav.axisCommandManager:deactivateGroundEngineAltitudeStabilization()
                Nav.axisCommandManager:updateCommandFromActionStart(axisCommandId.vertical, -1.0)
        actionStop:
            args: [down]
            lua: |
                Nav.axisCommandManager:updateCommandFromActionStop(axisCommandId.vertical, 1.0)
                Nav.axisCommandManager:activateGroundEngineAltitudeStabilization(currentGroundAltitudeStabilization)

        actionStart:
            args: [groundaltitudeup]
            lua: Nav.axisCommandManager:updateTargetGroundAltitudeFromActionStart(1.0)

        actionLoop:
            args: [groundaltitudeup]
            lua: Nav.axisCommandManager:updateTargetGroundAltitudeFromActionLoop(1.0)


        actionStart:
            args: [groundaltitudedown]
            lua: Nav.axisCommandManager:updateTargetGroundAltitudeFromActionStart(-1.0)

        actionLoop:
            args: [groundaltitudedown]
            lua: Nav.axisCommandManager:updateTargetGroundAltitudeFromActionLoop(-1.0)

        actionStart:
            args: [yawright]
            lua: yawInput = - 1
        actionStop:
            args: [yawright]
            lua: yawInput = 0
        actionStart:
            args: [yawleft]
            lua: yawInput = 1
        actionStop:
            args: [yawleft]
            lua: yawInput = 0
        actionStart:
            args: [brake]
            lua: |
                brakeInput = 1
                local longitudinalCommandType = Nav.axisCommandManager:getAxisCommandType(axisCommandId.longitudinal)
                if (longitudinalCommandType == axisCommandType.byTargetSpeed) then
                    local targetSpeed = Nav.axisCommandManager:getTargetSpeed(axisCommandId.longitudinal)
                    if (math.abs(targetSpeed) > constants.epsilon) then
                        Nav.axisCommandManager:updateCommandFromActionStart(axisCommandId.longitudinal, - utils.sign(targetSpeed))
                    end
                end
        actionStop:
            args: [brake]
            lua: brakeInput = - 1

        actionLoop:
            args: [brake]
            lua: |
                local longitudinalCommandType = Nav.axisCommandManager:getAxisCommandType(axisCommandId.longitudinal)
                if (longitudinalCommandType == axisCommandType.byTargetSpeed) then
                    local targetSpeed = Nav.axisCommandManager:getTargetSpeed(axisCommandId.longitudinal)
                    if (math.abs(targetSpeed) > constants.epsilon) then
                        Nav.axisCommandManager:updateCommandFromActionLoop(axisCommandId.longitudinal, - utils.sign(targetSpeed))
                    end
                end
        actionStart:
            args: [booster]
            lua: |
                if analog_input == 1 then
                    system.lockView(0)
                    analog_input = 0
                    system.print("Analog mode Disabled")
                else
                    system.lockView(1)
                    analog_input = 1
                    system.print("Analog mode Enabled")
                end

        actionStart:
            args: [stopengines]
            lua: Nav.axisCommandManager:resetCommand(axisCommandId.longitudinal)
        actionStart:
            args: [speedup]
            lua: Nav.axisCommandManager:updateCommandFromActionStart(axisCommandId.longitudinal, 5.0)
        actionLoop:
            args: [speedup]
            lua: Nav.axisCommandManager:updateCommandFromActionLoop(axisCommandId.longitudinal, 1.0)
        actionStart:
            args: [speeddown]
            lua: Nav.axisCommandManager:updateCommandFromActionStart(axisCommandId.longitudinal, -5.0)
        actionLoop:
            args: [speeddown]
            lua: Nav.axisCommandManager:updateCommandFromActionLoop(axisCommandId.longitudinal, -1.0)
        actionStart:
            args: [antigravity]
            lua: if antigrav ~= nil then antigrav.toggle() end